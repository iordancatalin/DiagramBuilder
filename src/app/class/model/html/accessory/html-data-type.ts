import {Cloneable} from '../../../intf/intf-clonable';import {ValidationUtil} from '../../../ui/validation-util';import {HtmlColumn} from '../column/html-column';export class HtmlDataType implements Cloneable<HtmlDataType> {  constructor(private _dataType: string,              private  _hasLength?: boolean,              private _hasPrecision?: boolean,              private _selected: boolean = false,              private _length?: string,              private _precision?: string,              private _column?: HtmlColumn) {  }  public clone(): HtmlDataType {    return new HtmlDataType(this._dataType, this._hasLength, this._hasPrecision, this._selected);  }  get dataType(): string {    return this._dataType;  }  set dataType(value: string) {    this._dataType = value;    this.emit();  }  get hasLength(): boolean {    return this._hasLength;  }  set hasLength(value: boolean) {    this._hasLength = value;    this.emit();  }  get hasPrecision(): boolean {    return this._hasPrecision;  }  set hasPrecision(value: boolean) {    this._hasPrecision = value;    this.emit();  }  get selected(): boolean {    return this._selected;  }  set selected(value: boolean) {    this._selected = value;  }  get length(): string {    return this._length;  }  set length(value: string) {    this._length = value;  }  get precision(): string {    return this._precision;  }  set precision(value: string) {    this._precision = value;  }  get column(): HtmlColumn {    return this._column;  }  set column(value: HtmlColumn) {    this._column = value;  }  public setDatatypeWithoutEmit(value: string) {    this._dataType = value;  }  private emit() {    if (!ValidationUtil.isNullOrUndefined(this._column)) {      this._column.emit();    }  }}