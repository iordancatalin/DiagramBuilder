import {Observable, of} from 'rxjs/index';import {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/internal/operators';import {DEBOUNCE_TIME} from '../../../constants/constants';import {AbstractPrimaryKeyConstraint} from '../../../model-abstract/primary-key/abstract-primary-key-constraint';import {PrimaryKeyConstraint} from '../../db/primary-key/primary-key-constraint';export class HtmlPrimaryKeyConstraint extends AbstractPrimaryKeyConstraint {  public constructor(id: string, private _tableId: string, private _diagramId: string) {    super(id);  }  public build(): PrimaryKeyConstraint {    const constraint: PrimaryKeyConstraint = new PrimaryKeyConstraint(this.id);    constraint.name = this.name;    return constraint;  }  get tableId(): string {    return this._tableId;  }  set tableId(value: string) {    this._tableId = value;  }  get diagramId(): string {    return this._diagramId;  }  set diagramId(value: string) {    this._diagramId = value;  }  get subject$(): Observable<string> {    return this._subject$.pipe    (      debounceTime(DEBOUNCE_TIME),      map(value => value.name),      distinctUntilChanged(),      switchMap(value => of(value))    );  }}