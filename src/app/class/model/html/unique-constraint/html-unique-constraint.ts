import {Observable, of} from 'rxjs/index';import {debounceTime, distinctUntilChanged, switchMap} from 'rxjs/internal/operators';import {DEBOUNCE_TIME} from '../../../constants/constants';import {AbstractUniqueConstraint} from '../../../model-abstract/unique-constraint/abstract-uniques-constraint';import {compareHtmlUniqueConstraint} from '../../../ui/comparator-util';import {ValidationUtil} from '../../../ui/validation-util';import {UniqueConstraint} from '../../db/unique-constraint/unique-constraint';export class HtmlUniqueConstraint extends AbstractUniqueConstraint {  private _extraConstraint = false;  private _textColumns: string;  public constructor(id: string, private _tableId: string, private _diagramId: string) {    super(id);  }  public isValid(): boolean {    return !ValidationUtil.isNullOrUndefined(this._textColumns) && this._textColumns !== '';  }  public build(): UniqueConstraint {    const constraint: UniqueConstraint = new UniqueConstraint(this.id);    constraint.name = this.name;    constraint.columns = ValidationUtil.isNullOrUndefined(this._textColumns) ? [] :      this._textColumns.split(',').map(val => val.trim());    return constraint;  }  get extraConstraint(): boolean {    return this._extraConstraint;  }  set extraConstraint(value: boolean) {    this._extraConstraint = value;    this.emit();  }  get textColumns(): string {    return this._textColumns;  }  set textColumns(value: string) {    this._textColumns = value;    this.emit();  }  get tableId(): string {    return this._tableId;  }  set tableId(value: string) {    this._tableId = value;  }  get diagramId(): string {    return this._diagramId;  }  set diagramId(value: string) {    this._diagramId = value;  }  set textColumnsWithoutEmit(value: string) {    this._textColumns = value;  }  get subject$(): Observable<any> {    return this._subject$.pipe    (      debounceTime(DEBOUNCE_TIME),      distinctUntilChanged(compareHtmlUniqueConstraint),      switchMap(value => of(value))    );  }}