import {HtmlLine} from '../../accessory/html-line';import {HtmlRelation} from '../../accessory/html-relation';import {HtmlForeignKey} from '../html-foreign-key';import {HtmlTable} from '../../table/html-table';export class HtmlForeignKeyBuilder {  private _name: string;  private _relations: Array<HtmlRelation>;  private _childTable: HtmlTable;  private _parentTable: HtmlTable;  private _lines: Array<HtmlLine>;  private _comment: string;  public constructor(private _id: string, private _diagramId: string) {  }  public withName(name: string): HtmlForeignKeyBuilder {    this._name = name;    return this;  }  public withRelations(relations: Array<HtmlRelation>): HtmlForeignKeyBuilder {    this._relations = relations;    return this;  }  public withChildTable(childTable: HtmlTable): HtmlForeignKeyBuilder {    this._childTable = childTable;    return this;  }  public withParentTable(parentTable: HtmlTable): HtmlForeignKeyBuilder {    this._parentTable = parentTable;    return this;  }  public withLines(lines: Array<HtmlLine>): HtmlForeignKeyBuilder {    this._lines = lines;    return this;  }  public withComment(comment: string): HtmlForeignKeyBuilder {    this._comment = comment;    return this;  }  public build(): HtmlForeignKey {    const constraint: HtmlForeignKey = new HtmlForeignKey(this._id, this._diagramId);    constraint.nameWithoutEmit = this._name;    constraint.commentWithoutEmit = this._comment;    constraint.childTable = this._childTable;    constraint.parentTable = this._parentTable;    constraint.relations = this._relations;    constraint.lines = this._lines;    return constraint;  }}