import {CommonService} from '../../services/common.service';import {getZIndex} from '../constants/constants';import {DataTypeEnum} from '../enum/data-type-enum';import {Position} from '../graphics/position';import {HtmlDataType} from '../model/html/accessory/html-data-type';import {HtmlColumnBuilder} from '../model/html/column/builder/html-column-builder';import {HtmlTableBuilder} from '../model/html/table/builder/html-table-builder';import {HtmlTable} from '../model/html/table/html-table';export class TableUtil {  public static generateDefaultTable(event: MouseEvent, diagramId: string): HtmlTable {    const table = new HtmlTableBuilder(CommonService.createId(), diagramId)      .withName('table_01')      .withPosition(new Position(event.offsetX - 50, event.offsetY - 50))      .withZIndex(getZIndex())      .build();    const column1 = new HtmlColumnBuilder(CommonService.createId(), table.id, diagramId)      .withName('id')      .withExtraColumn(false)      .withForeignKey(false)      .withNullable(false)      .withPrimaryKey(true)      .withType(new HtmlDataType(DataTypeEnum.NUMBER))      .build();    const column2 = new HtmlColumnBuilder(CommonService.createId(), table.id, diagramId)      .withName('name')      .withExtraColumn(false)      .withForeignKey(false)      .withNullable(true)      .withPrimaryKey(false)      .withType(new HtmlDataType(DataTypeEnum.VARCHAR2))      .build();    table.addColumn(column1);    table.addColumn(column2);    return table;  }  public static generateTableByKey(diagramId: string): HtmlTable {    const table = new HtmlTableBuilder(CommonService.createId(), diagramId)      .withName('table_01')      .withPosition(new Position(50, 50))      .withZIndex(getZIndex())      .build();    const column1 = new HtmlColumnBuilder(CommonService.createId(), table.id, diagramId)      .withName('id')      .withExtraColumn(false)      .withForeignKey(false)      .withNullable(false)      .withPrimaryKey(true)      .withType(new HtmlDataType(DataTypeEnum.NUMBER))      .build();    const column2 = new HtmlColumnBuilder(CommonService.createId(), table.id, diagramId)      .withName('name')      .withExtraColumn(false)      .withForeignKey(false)      .withNullable(true)      .withPrimaryKey(false)      .withType(new HtmlDataType(DataTypeEnum.VARCHAR2))      .build();    table.addColumn(column1);    table.addColumn(column2);    return table;  }}